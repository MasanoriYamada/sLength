// this program for analysinf thebs wave function of omega - proton interaction 
//and the output is central potential
//This is set for reading data from hachi01
//// using this command to sort the Bs data "sort -o BS1 -u -n -k1 bs_mean001"
#include <iostream>
#include <complex>
#include <fstream>
#include <string>
#include <math.h>
#include <cmath>
#include <iomanip>
#include <stdlib.h>
#include <cstdlib>
#include <new>
#include <stdio.h>

using namespace std;
typedef std::complex<double> COMPLEX; 
void fit(double *,double*,double&,double& ,double&,double&,double&,double&,double& );
//void fit(double *,double*,double&,double&,double&);
//void jackknife_mass(int,double*,double&,double&);
void bin_mean(double* ,double* ,double* );
void save_data(fstream&,double[],double[]);

static const int DATASIZE=16*16*16;
#define MNSTR 4096
#define ascale 0.1209

#define hbarc 197.327
#define gscale  hbarc/ascale
#define Nx   16
#define Ny   16
#define Nz   16
#define	NiT  16              //Dimension of time slices
static const int r_sq = Nx*Nx + Ny*Ny + Nz*Nz;
//static const int r_sq = Nx*Nx;


#define XYZnodeSites Nx*Ny*Nz
//////////////////////////////////////////////////////////////////////////////////////////////
#define	i_iT 7                //initial time slices
#define f_iT 8              //final time slices
#define num_conf 700
//////////////////////////////////////////////////////////////////////////////////////////////
#define m_po 0.597  // redused mass of PROTON_omega Mev

int main()
{
#define pot_bin(ix,iy,iz,conf) pot_bin[ix+Nx*(iy+Ny*(iz+Nz*(conf)))]
#define pot_xyz(ix,iy,iz)  pot_xyz[ix+Nx*(iy+Ny*(iz))]
#define pot(ix,iy,iz)  pot[ix+Nx*(iy+Ny*(iz))]
#define pot_mean(ix,iy,iz)  pot_mean[ix+Nx*(iy+Ny*(iz))]
#define pot_sigma(ix,iy,iz)  pot_sigma[ix+Nx*(iy+Ny*(iz))]
#define Radii(ix,iy,iz)  Radii[ix+Nx*(iy+Ny*(iz))]
#define Fx(ix,iy,iz)  Fx[ix+Nx*(iy+Ny*(iz))]
#define rs(ix,iy,iz)  (ix*ix+iy*iy+iz*iz)
#define datain(ix,iy,iz)  datain[ix+Nx*(iy+Ny*(iz))]
#define datain_sigma(ix,iy,iz)  datain_sigma[ix+Nx*(iy+Ny*(iz))]


	double* pot_bin=new double[XYZnodeSites*num_conf];
        COMPLEX* pot_xyz= new COMPLEX[XYZnodeSites];
        double* pot= new double[XYZnodeSites];
        double* pot_mean = new double[XYZnodeSites];
        double* pot_sigma = new double[XYZnodeSites];
        double* Fx = new double[XYZnodeSites];

	char fname[MNSTR];      
	 double b1,b2,b3,b4,b5,b6,b7,b8,chisq;
	
	for(int iT=i_iT  ; iT< f_iT  ; ++iT ){
	       	for (int icon=0; icon< num_conf; icon++) {

 ///////////////////////////////////////initializing /////////////////////////
		    for (int i=0; i< XYZnodeSites; i++) {((COMPLEX*)pot_xyz)[i]=0.0;}
           
                sprintf(fname,"/Users/SINYAMADA/lab/data/results/bin1/Potential/binPotential/xyz/Potential.000700-%06d.RC16x32_B1830Kud013760Ks013710C17610.kap_013710._it%02d",icon,iT);
              //  sprintf(fname,"/Users/SINYAMADA/lab/data/results/bin20/Potential/binPotential/xyz/Potential.000035-%06d.RC16x32_B1830Kud013760Ks013710C1761.it%02d",icon,iT);
               // sprintf(fname,"/Users/SINYAMADA/lab/data/results/bin350/Potential/binPotential/xyz/Potential.%06d-%06d.RC16x32_B1830Kud013760Ks013710C1761.it%02d",num_conf,icon,iT);
                 cout << fname<<endl;
	   
		     FILE *fp;
		   fp=fopen(fname, "r");
	   fread(pot_xyz, sizeof(double),2* XYZnodeSites, fp);
		    fclose(fp);
	  
			for(int iz = 0; iz < Nz; ++iz){
				for(int iy = 0; iy < Ny; ++iy){
					for(int ix = 0; ix < Nx; ++ix){
					  pot_bin(ix,iy,iz,icon)= gscale*pot_xyz(ix,iy,iz).real();
					 
                           }}}//ixyz
			// cout<<pot_xyz(0,0,0)<<endl;
					
	}// icon
		//*******************************
	bin_mean( pot_bin,pot_mean,pot_sigma);
  
		fstream outfile;
 	char fname1 [MNSTR];
	sprintf(fname1,"../out/inave.it%02d", iT);
	outfile.open(fname1,ios::out);
	save_data(outfile,pot_mean,pot_sigma);
	outfile.close();

                for(int iz = 0; iz < 8; ++iz){
				for(int iy = 0; iy < 8; ++iy){
                for(int ix = 0; ix < 8; ++ix){
					 
                    pot(ix,iy,iz)= pot_mean(ix,iy,iz);
                    pot_sigma(ix,iy,iz)= pot_sigma(ix,iy,iz);
						}}}//ixyz
        cout<<"Start fit"<<endl;
		//fit(pot_mean,pot_sigma,b1,b2,b3,b4,b5,b6,chisq);      //ave fit
	//	fit(pot_mean,pot_sigma,b1,b2,chisq);
	//	cout<<b1<<"    "<<b2<<endl;
     
        cout<<b1<<"     "<<b2<<"     "<<b3<<"     "<<b4<<"     "<< b5 <<"   "<<b6<<"   "<<b7<<"   "<<b8<<"   "<<chisq<<endl;

            for(int iz = 0; iz < 8; ++iz){
            for(int iy = 0; iy < 8; ++iy){
            for(int ix = 0; ix < 8; ++ix){
 Fx(ix,iy,iz) =b1*exp(-b2*ascale*ascale*rs(ix,iy,iz))+ b3*exp(-b4*ascale*ascale*rs(ix,iy,iz))+ b5*exp(-b6*ascale*ascale*rs(ix,iy,iz))+ b7*exp(-b8*ascale*ascale*rs(ix,iy,iz));
                    
				     		}}}//ixyz
	char fname [MNSTR];
	sprintf(fname,"../out/ave.it%02d.param", iT);
	outfile.open(fname,ios::out);
	save_data(outfile,Fx,pot_sigma);
	outfile.close();


//}//iT
   
	//////////////////////// fitting  //////////////////////////////////////////////////////
    	
    /*
	double* b1_conf = new double [num_conf];  //fitted for each configuration.
	double* b2_conf = new double [num_conf];
	double* b3_conf = new double [num_conf];
	double* b4_conf = new double [num_conf];
	double* b5_conf = new double [num_conf];
	*/
	

		for (int icon=0; icon< num_conf; icon++) {
			  for (int i=0; i< XYZnodeSites; i++){ pot[i]=0.0;}

	    
	        	for(int iz = 0; iz < 8; ++iz){
				for(int iy = 0; iy < 8; ++iy){
					for(int ix = 0; ix < 8; ++ix){	
					 
					  pot(ix,iy,iz)= pot_bin(ix,iy,iz,icon);
						}}}//ixyz
			//cout<<pot_bin(0,0,0,icon)<<endl;
			//fit(pot,pot_sigma,b1,b2,b3,b4,b5,chisq);
		        //fit(pot,pot_sigma,b1,b2,chisq);
				 fit(pot,pot_sigma,b1,b2,b3,b4,b5,b6,chisq);

	// b1_conf[icon] = b1; b2_conf[icon] = b2; b3_conf[icon] = b3; b4_conf[icon] = b4; b5_conf[icon] = b5;
 cout<<b1<<"     "<<b2<<"     "<<b3<<"     "<<b4<<"     "<< b5 <<"   "<<b6<<"   "<<"   "<<chisq<<endl;
            char fname3[MNSTR];
            sprintf(fname3,"../out/%06d.it%02d.param",icon,iT);
            fstream out_file;
            out_file.open(fname3,ios::out);
            	 //	cout << "---------------------------------------------------------------------"<<endl;
				 	out_file<<b1<<"     "<<b2<<"     "<<b3<<"     "<<b4<<"     "<< b5 <<"   "<<b6<<"   "<<chisq<<endl;
			//	cout << "---------------------------------------------------------------------"<<endl;       
		    out_file.close();
            
		
				}//icon
	
	
	//	jackknife (b1_conf,b1,sigma_b1);
    }//IT
       
	//delete[]b1_conf;delete[]b2_conf;delete[]b3_conf;delete[]b4_conf;delete[]b5_conf;

       delete[]pot_bin;
       delete[]pot_xyz; delete[]pot; delete[]pot_mean;delete[]pot_sigma;
       delete[]Fx;
       	return 0;
}//main

/////////////////////////////////////////fitting //////////////////////////////////////////

extern "C" {
  void mrqmin_(double x[],double y[],double sig[], int& ndata,double a[],int ia[],int& ma,
				 double covar[], double alpha[],int& nca, double &chisq,
 void (*func)(double& x,double a[],double& yfit,double dyda[],int& ma),double& alambda);	       
 void single_exp(double& x,double a[],double& yfit,double dyda[],int& ma);
}

void single_exp(double& x,double a[],double& yfit,double dyda[],int& ma)
{
 /* 
  double b1=a[0];
  double b2=a[1];
  double b3=a[2];
  double b4=a[3];
  double b5=a[4];
  yfit = b1*exp(-b2*x*x)+b3*(1-exp(-b4*x*x))*(exp(-b5*x)/x)*(exp(-b5*x)/x);
  
        dyda[0] = exp(-b2*x*x); 
        dyda[1] = -b1*x*x*exp(-b2*x*x);
       	dyda[2] = (1-exp(-b4*x*x))*(exp(-b5*x)/x)*(exp(-b5*x)/x);
       	dyda[3] = b3*x*x*exp(-b4*x*x)*(exp(-b5*x)/x)*(exp(-b5*x)/x);
       	dyda[4] =-b3*(1-exp(-b4*x*x))*2*(exp(-b5*x)/x)*(exp(-b5*x));
  */
    double b1=a[0];
    double b2=a[1];
    double b3=a[2];
    double b4=a[3];
    double b5=a[4];
    double b6=a[5];
    double b7=a[6];
    double b8=a[7];
   // yfit = b1*exp(-b2*x*x)+ b3*exp(-b4*x*x)+ b5*exp(-b6*x*x);//+ b7*exp(-b8*x*x);
    yfit = b1*exp(-b2*x*x)+ b3*exp(-b4*x*x)+ b5*exp(-b6*x*x) + b1*exp(-b2*(r_sq-(x*x)))+ b3*exp(-b4*(r_sq-(x*x)))+ b5*exp(-b6*(r_sq-(x*x))) +b1*exp(-b2*(r_sq-(x*x)))+ b3*exp(-b4*(r_sq-(x*x)))+ b5*exp(-b6*(r_sq-(x*x)));
    
    
    dyda[0] = exp(-b2*x*x);
    dyda[1] = -b1*x*x*exp(-b2*x*x);
    dyda[2] = exp(-b4*x*x);
    dyda[3] = -b3*x*x*exp(-b4*x*x);
    dyda[4] = exp(-b6*x*x);
    dyda[5] = -b5*x*x*exp(-b6*x*x);
    dyda[6] = exp(-b8*x*x);
    dyda[7] = -b7*x*x*exp(-b8*x*x);
    
}

//void fit(double datain[],double datain_sigma[], double& b1, double& b2,double& b3,double& b4,double& chisq)
 void fit(double datain[],double datain_sigma[], double& b1, double& b2,double& b3,double& b4,double& b5,double& b6,double& chisq)
//void fit(double datain[],double datain_sigma[], double& b1, double& b2,double& chisq)
{
	double x[8*8*8], y[8*8*8], dy[8*8*8];
	
	int ixyz=0;
	   for(int iz = 0; iz < 8; ++iz){
		for(int iy = 0; iy < 8; ++iy){
		    for(int ix = 0; ix < 8; ++ix){	
		      x[ixyz]  = ascale*sqrt(rs(ix,iy,iz));

		 y[ixyz]  = datain(ix,iy,iz);
		 dy[ixyz] = datain_sigma(ix,iy,iz);
		 ixyz++;
		    }}}//ixyz
	
	int ndata = 8*8*8;/*
	static double a[2];
	static int    is_initial = 1;
	int   ia[]={1,1}, ma =2;
	double covar[4],alpha[4];
	int    nca = 2;*/
	static double a[6];
	static int    is_initial = 1;
	int   ia[]={1,1,1,1,1,1}, ma =6;
	double covar[36],alpha[36];
	int    nca = 6;
	double alambda;
	
	if(is_initial==1){
		is_initial=0;
	 /*
        a[0] =-212;
        a[1] = 2.39;
        a[2] = -374;
        a[3] =1.2;
        a[4] = 4.9;
	*/
		/* //it07
        a[0]               = -157.287  ;
        a[1]               =  2.00842 ;
        a[2]               = 201.697;
        a[3]               = 12.5821 ;
        a[4]               = 2305.73 ;
        a[5]               = 69.2551 ;
        a[6]               =  -1217.77;
        a[7]               =  69.2551   ;
		*/  //it08
        /*a[0]               = -150.925   ;
        a[1]               = 2.68075  ;
        a[2]               = 515.608 ;
        a[3]               = 5.7681;
        a[4]               = 2322.14 ;
        a[5]               = 65.7699 ;
        *///a[6]               = -1201.59 ;
        //a[7]               = 65.7296  ;
	 //it09
        a[0]               = -533.934  ;
        a[1]               =  2.80389 ;
        a[2]               = 486.76;
        a[3]               = 3.91707 ;
        a[4]               = 2336.8 ;
        a[5]               = 59.5949 ;
        a[6]               = -1186.94;
        a[7]               = 58.7904  ;
        
      }
	//
	// The initial call
	//
	alambda = -1.0;
	mrqmin_(x,y,dy, ndata,a,ia, ma,	covar,alpha, nca,chisq, single_exp, alambda);
	//
	// iterations
	//
	for(int iter=0; iter<65536; iter++){
		mrqmin_(x,y,dy, ndata,a,ia, ma,	covar,alpha, nca,chisq, single_exp, alambda);
		if (alambda > 1.0e64) break;
	}
	if (alambda <= 1.0e64) {
		cerr << "convergence is not achieved\n";
			exit(1);
	}
	//
	// The final call
	//
	alambda = 0.0;
	mrqmin_(x,y,dy, ndata,a,ia, ma,	covar,alpha, nca,chisq, single_exp, alambda);
    b1 = a[0];
    b2 = a[1];
    b3 = a[2];
    b4 = a[3];
    b5 = a[4];
    b6 = a[5];
    //b7 = a[6];
    //b8 = a[7];

}
//////////////////////////////END OF FITTING /////////////////////////////////

/////////////////////////////////bin_mean  //////////////////////////////////

void bin_mean(double* pot_bin,double* pot_mean,double* pot_sigma)
{       
  //	for (int i=0; i< XYZnodeSites; i++) {pot_mean[i]=0.0;pot_sigma[i]=0.0;}
	
	double con=num_conf;
	
	for(int iz = 0; iz <  Nz; ++iz){
		for(int iy = 0; iy < Ny; ++iy){
			for(int ix = 0; ix < Nx; ++ix){
				
				for(int conf=0 ; conf<num_conf ; ++conf ) {
					pot_mean(ix,iy,iz)+= pot_bin(ix,iy,iz,conf);
				}
		

					pot_mean(ix,iy,iz)= pot_mean(ix,iy,iz)/con;
	
				for(int conf=0 ; conf<num_conf ; ++conf ){
					pot_sigma(ix,iy,iz) +=	((pot_bin(ix,iy,iz,conf)- pot_mean(ix,iy,iz))*(pot_bin(ix,iy,iz,conf) - pot_mean(ix,iy,iz)));}//conf
				
			       	pot_sigma(ix,iy,iz)=sqrt(pot_sigma(ix,iy,iz)*( (con -1) / con) );

			}}}//ixyz
	//	cout<<num_conf<<endl;
	//cout<< (con-1)/con<<endl;
}
///////////////////////////////////////end of bin_mean//////////////////////////////////////

/////////////////////////////////////////////save_data///////////////////////////////////////
void save_data(fstream& outfile,double* pot_mean,double pot_sigma[])
{

	double*Radii = new double[ XYZnodeSites];   //jackknife standard error.
	
	
		for(int iz = 0; iz < Nz; ++iz){
		for(int iy = 0; iy < Ny; ++iy){
        for(int ix = 0; ix < Nx; ++ix){
				
		      	Radii(ix,iy,iz) =sqrt(ix*ix+iy*iy+iz*iz);

	if (iz< 8){
	if (iy< 8){
	if (ix< 8){

        
     	//coutfile<<ascale*Radii(ix,iy,iz) <<"		"<<setw(16)<< gscale*pot_mean(ix,iy,iz)<<"     "<<setw(16)<< gscale*pot_sigma(ix,iy,iz)<<endl;
        outfile<<ascale*Radii(ix,iy,iz) <<"		"<<setw(16)<< pot_mean(ix,iy,iz)<<"     "<<setw(16)<< pot_sigma(ix,iy,iz)<<endl;

            //	cout<< pot_sigma(ix,iy,iz);

	}}}//if
		}}}//ixyz
	delete[]Radii;
	}
/////////////////////////////////////end of save data ////////////////////////////////////////
/////////////////////////////////////// END //////////////////////////////////////////////
